/**
 * üêô –ö–†–ê–ö–ï–ù: –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
 * –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç AudioRouter –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
 */

class KrakenDiagnostics {
    constructor() {
        this.isEnabled = true;
        this.logHistory = [];
        this.maxLogHistory = 100;
        
        this.init();
    }

    init() {
        this.createDiagnosticsPanel();
        this.setupKeyboardShortcut();
        this.interceptAudioRouterLogs();
        
        console.log('üîç –ö–†–ê–ö–ï–ù: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (Ctrl+Shift+D –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è)');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            this.runAutoCheck();
        }, 3000);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    createDiagnosticsPanel() {
        this.panel = document.createElement('div');
        this.panel.id = 'kraken-diagnostics';
        this.panel.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            width: 400px;
            height: 500px;
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid #4a9eff;
            border-radius: 10px;
            color: #fff;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            z-index: 10000;
            display: none;
            flex-direction: column;
        `;

        this.panel.innerHTML = `
            <div style="padding: 10px; border-bottom: 1px solid #333; display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0; color: #4a9eff;">üêô –ö–†–ê–ö–ï–ù –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h3>
                <button id="close-diagnostics" style="background: none; border: none; color: #fff; font-size: 16px; cursor: pointer;">√ó</button>
            </div>
            
            <div style="padding: 10px; border-bottom: 1px solid #333;">
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                    <button id="test-audio-devices" style="background: #4a9eff; border: none; color: #fff; padding: 5px 10px; border-radius: 5px; cursor: pointer;">–¢–µ—Å—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤</button>
                    <button id="test-audio-routing" style="background: #4a9eff; border: none; color: #fff; padding: 5px 10px; border-radius: 5px; cursor: pointer;">–¢–µ—Å—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞</button>
                    <button id="clear-logs" style="background: #666; border: none; color: #fff; padding: 5px 10px; border-radius: 5px; cursor: pointer;">–û—á–∏—Å—Ç–∏—Ç—å</button>
                </div>
                
                <div id="audio-status" style="font-size: 11px; color: #aaa;">
                    –°—Ç–∞—Ç—É—Å: –ó–∞–≥—Ä—É–∑–∫–∞...
                </div>
            </div>
            
            <div id="diagnostics-log" style="flex: 1; padding: 10px; overflow-y: auto; background: rgba(0, 0, 0, 0.5);">
                <div style="color: #4a9eff;">üêô –ö–†–ê–ö–ï–ù –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ...</div>
            </div>
        `;

        document.body.appendChild(this.panel);
        this.bindPanelEvents();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–∞–Ω–µ–ª–∏
     */
    bindPanelEvents() {
        this.panel.querySelector('#close-diagnostics').addEventListener('click', () => this.hide());
        this.panel.querySelector('#test-audio-devices').addEventListener('click', () => this.testAudioDevices());
        this.panel.querySelector('#test-audio-routing').addEventListener('click', () => this.testAudioRouting());
        this.panel.querySelector('#clear-logs').addEventListener('click', () => this.clearLogs());
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
     */
    setupKeyboardShortcut() {
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                e.preventDefault();
                this.toggle();
            }
        });
    }

    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç –ª–æ–≥–æ–≤ AudioRouter
     */
    interceptAudioRouterLogs() {
        const originalLog = console.log;
        const originalWarn = console.warn;
        const originalError = console.error;

        console.log = (...args) => {
            originalLog.apply(console, args);
            this.addLog('INFO', args.join(' '));
        };

        console.warn = (...args) => {
            originalWarn.apply(console, args);
            this.addLog('WARN', args.join(' '));
        };

        console.error = (...args) => {
            originalError.apply(console, args);
            this.addLog('ERROR', args.join(' '));
        };
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
     */
    addLog(level, message) {
        if (!this.isEnabled) return;

        const timestamp = new Date().toLocaleTimeString();
        const logEntry = {
            timestamp,
            level,
            message
        };

        this.logHistory.push(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if (this.logHistory.length > this.maxLogHistory) {
            this.logHistory.shift();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
        if (this.panel && this.panel.style.display !== 'none') {
            this.updateLogDisplay();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
     */
    updateLogDisplay() {
        const logContainer = this.panel.querySelector('#diagnostics-log');
        
        logContainer.innerHTML = this.logHistory
            .filter(entry => entry.message.includes('üêô') || entry.message.includes('AudioRouter') || entry.message.includes('–ö–†–ê–ö–ï–ù'))
            .slice(-20) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
            .map(entry => {
                const color = {
                    'INFO': '#4a9eff',
                    'WARN': '#ffa500',
                    'ERROR': '#ff4444'
                }[entry.level] || '#fff';

                return `<div style="color: ${color}; margin-bottom: 2px;">
                    [${entry.timestamp}] ${entry.level}: ${entry.message}
                </div>`;
            })
            .join('');

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    /**
     * –¢–µ—Å—Ç –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    async testAudioDevices() {
        this.addLog('INFO', 'üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AudioRouter
            if (!window.audioEngine || !window.audioEngine.audioRouter) {
                this.addLog('ERROR', '‚ùå AudioRouter –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }

            const audioRouter = window.audioEngine.audioRouter;
            this.addLog('INFO', `‚úÖ AudioRouter –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${audioRouter.isInitialized ? '–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' : '–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}`);

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            const devices = await audioRouter.getAvailableDevices();
            this.addLog('INFO', `üì± –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}`);
            
            devices.forEach((device, index) => {
                this.addLog('INFO', `  ${index + 1}. ${device.label || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${device.deviceId.substring(0, 8)}...)`);
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = audioRouter.getSettings();
            this.addLog('INFO', `‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${settings.mainDeviceId || '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}`);
            this.addLog('INFO', `‚öôÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${settings.monitorDeviceId || '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}`);
            this.addLog('INFO', `üîä –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(settings.mainVolume * 100)}%`);
            this.addLog('INFO', `üéß –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${Math.round(settings.monitorVolume * 100)}%`);

        } catch (error) {
            this.addLog('ERROR', `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
        }
    }

    /**
     * –¢–µ—Å—Ç –∞—É–¥–∏–æ —Ä–æ—É—Ç–∏–Ω–≥–∞
     */
    async testAudioRouting() {
        this.addLog('INFO', 'üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∞—É–¥–∏–æ —Ä–æ—É—Ç–∏–Ω–≥–∞...');
        
        try {
            const audioEngine = window.audioEngine;
            if (!audioEngine) {
                this.addLog('ERROR', '‚ùå AudioEngine –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }

            this.addLog('INFO', `üéµ AudioEngine —Å—Ç–∞—Ç—É—Å: ${audioEngine.isPlaying ? '–∏–≥—Ä–∞–µ—Ç' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
            this.addLog('INFO', `‚è±Ô∏è –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${audioEngine.getCurrentTime().toFixed(2)}—Å`);
            this.addLog('INFO', `üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audioEngine.duration.toFixed(2)}—Å`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ—É—Ç–µ—Ä—É
            const audioRouter = audioEngine.audioRouter;
            if (audioRouter && audioRouter.isInitialized) {
                this.addLog('INFO', '‚úÖ –†–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥–≤–∏–∂–∫—É');
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä-–º–∏–∫—Å
                if (audioEngine.masterMix) {
                    this.addLog('INFO', '‚úÖ –ú–∞—Å—Ç–µ—Ä-–º–∏–∫—Å —Å–æ–∑–¥–∞–Ω');
                } else {
                    this.addLog('WARN', '‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä-–º–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            } else {
                this.addLog('WARN', '‚ö†Ô∏è –†–æ—É—Ç–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥–≤–∏–∂–∫—É');
            }

        } catch (error) {
            this.addLog('ERROR', `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–∏–Ω–≥–∞: ${error.message}`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    updateStatus() {
        if (!this.panel) return;

        const statusElement = this.panel.querySelector('#audio-status');
        const audioEngine = window.audioEngine;
        
        let status = 'AudioEngine: ';
        if (audioEngine) {
            status += `‚úÖ –ê–∫—Ç–∏–≤–µ–Ω | `;
            status += `AudioRouter: ${audioEngine.audioRouter ? '‚úÖ' : '‚ùå'} | `;
            status += `–ò–≥—Ä–∞–µ—Ç: ${audioEngine.isPlaying ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è'}`;
        } else {
            status += '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω';
        }

        statusElement.textContent = status;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å
     */
    show() {
        this.panel.style.display = 'flex';
        this.updateLogDisplay();
        this.updateStatus();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        this.statusInterval = setInterval(() => this.updateStatus(), 2000);
    }

    /**
     * –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
     */
    hide() {
        this.panel.style.display = 'none';
        if (this.statusInterval) {
            clearInterval(this.statusInterval);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–∞–Ω–µ–ª—å
     */
    toggle() {
        if (this.panel.style.display === 'none') {
            this.show();
        } else {
            this.hide();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
     */
    clearLogs() {
        this.logHistory = [];
        this.updateLogDisplay();
        this.addLog('INFO', 'üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
     */
    runAutoCheck() {
        this.addLog('INFO', 'üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const checks = [
            { name: 'AudioEngine', obj: window.audioEngine },
            { name: 'AudioRouter', obj: window.audioEngine?.audioRouter },
            { name: 'TrackCatalog', obj: window.trackCatalog },
            { name: 'LyricsDisplay', obj: window.lyricsDisplay }
        ];

        let passedChecks = 0;
        checks.forEach(check => {
            if (check.obj) {
                this.addLog('INFO', `‚úÖ ${check.name}: –Ω–∞–π–¥–µ–Ω`);
                passedChecks++;
            } else {
                this.addLog('WARN', `‚ö†Ô∏è ${check.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º AudioRouter –¥–µ—Ç–∞–ª—å–Ω–æ
        if (window.audioEngine?.audioRouter) {
            const router = window.audioEngine.audioRouter;
            this.addLog('INFO', `üéõÔ∏è AudioRouter —Å—Ç–∞—Ç—É—Å: ${router.isInitialized ? '–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' : '–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}`);
            
            if (router.isInitialized) {
                this.addLog('INFO', `üîä –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${router.audioContext ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
                this.addLog('INFO', `üéµ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º...`);
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                router.getAvailableDevices().then(devices => {
                    this.addLog('INFO', `üì± –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}`);
                    if (devices.length === 0) {
                        this.addLog('WARN', '‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞');
                    }
                }).catch(error => {
                    this.addLog('ERROR', `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${error.message}`);
                });
            }
        }

        const percentage = Math.round((passedChecks / checks.length) * 100);
        this.addLog('INFO', `üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${passedChecks}/${checks.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (${percentage}%)`);
        
        if (percentage === 100) {
            this.addLog('INFO', 'üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ö—Ä–∞–∫–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        } else if (percentage >= 75) {
            this.addLog('WARN', '‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
        } else {
            this.addLog('ERROR', '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        }
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.krakenDiagnostics = new KrakenDiagnostics();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = KrakenDiagnostics;
} 