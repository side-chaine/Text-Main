/**
 * AudioRouter - –°–∏—Å—Ç–µ–º–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞ –∞—É–¥–∏–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * –ß–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ "–ö—Ä–∞–∫–µ–Ω" - Phase 1 –û–¥–∏—Å—Å–µ–∏
 */
class AudioRouter {
    constructor() {
        this.audioContext = null;
        this.mainOutput = null;
        this.monitorOutput = null;
        this.splitter = null;
        this.devices = new Map();
        this.isInitialized = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.settings = {
            mainDeviceId: 'default',
            monitorDeviceId: null,
            monitorEnabled: false,
            monitorVolume: 0.8,
            mainVolume: 1.0
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioRouter
     */
    async initialize(audioContext) {
        try {
            this.audioContext = audioContext;
            await this.loadDevices();
            await this.createAudioGraph();
            this.isInitialized = true;
            console.log('üêô AudioRouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioRouter:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    async loadDevices() {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            this.devices.clear();
            
            devices.forEach(device => {
                if (device.kind === 'audiooutput') {
                    this.devices.set(device.deviceId, {
                        id: device.deviceId,
                        label: device.label || `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device.deviceId.slice(0, 8)}`,
                        kind: device.kind
                    });
                }
            });
            
            console.log(`üéµ –ù–∞–π–¥–µ–Ω–æ ${this.devices.size} –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
            return Array.from(this.devices.values());
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
            return [];
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ –≥—Ä–∞—Ñ–∞ –¥–ª—è —Ä–æ—É—Ç–∏–Ω–≥–∞
     */
    async createAudioGraph() {
        if (!this.audioContext) {
            throw new Error('AudioContext –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        // –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        this.splitter = this.audioContext.createChannelSplitter(2);
        
        // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏ –º–æ–Ω–∏—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–æ–≤
        this.mainOutput = this.audioContext.createGain();
        this.monitorOutput = this.audioContext.createGain();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
        this.mainOutput.gain.value = this.settings.mainVolume;
        this.monitorOutput.gain.value = this.settings.monitorVolume;
        
        // –°–æ–µ–¥–∏–Ω—è–µ–º –≥—Ä–∞—Ñ
        this.splitter.connect(this.mainOutput);
        this.splitter.connect(this.monitorOutput);
        
        console.log('üîó –ê—É–¥–∏–æ –≥—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—É–¥–∏–æ
     */
    connectSource(sourceNode) {
        if (!this.isInitialized || !sourceNode) {
            console.warn('‚ö†Ô∏è AudioRouter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω');
            return false;
        }

        try {
            sourceNode.connect(this.splitter);
            console.log('üéµ –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ä–æ—É—Ç–µ—Ä—É');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
            return false;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
     */
    async setMainDevice(deviceId) {
        try {
            if (!this.devices.has(deviceId) && deviceId !== 'default') {
                throw new Error(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤—ã—Ö–æ–¥—É
            this.mainOutput.connect(this.audioContext.destination);
            
            // –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è setSinkId
            if (this.audioContext.setSinkId) {
                await this.audioContext.setSinkId(deviceId);
                console.log(`üîä –û—Å–Ω–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${this.getDeviceLabel(deviceId)}`);
            }
            
            this.settings.mainDeviceId = deviceId;
            this.saveSettings();
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
            return false;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async setMonitorDevice(deviceId) {
        try {
            if (!deviceId) {
                this.settings.monitorEnabled = false;
                this.settings.monitorDeviceId = null;
                console.log('üéß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω');
                return true;
            }

            if (!this.devices.has(deviceId)) {
                throw new Error(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }

            // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π AudioContext –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å setSinkId –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
            this.settings.monitorDeviceId = deviceId;
            this.settings.monitorEnabled = true;
            
            console.log(`üéß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${this.getDeviceLabel(deviceId)}`);
            this.saveSettings();
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
            return false;
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏
     */
    setMainVolume(volume) {
        if (this.mainOutput) {
            this.mainOutput.gain.value = Math.max(0, Math.min(1, volume));
            this.settings.mainVolume = volume;
            this.saveSettings();
        }
    }

    setMonitorVolume(volume) {
        if (this.monitorOutput) {
            this.monitorOutput.gain.value = Math.max(0, Math.min(1, volume));
            this.settings.monitorVolume = volume;
            this.saveSettings();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     */
    getDeviceLabel(deviceId) {
        if (deviceId === 'default') return '–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é';
        const device = this.devices.get(deviceId);
        return device ? device.label : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è UI
     */
    getDevicesList() {
        const devices = Array.from(this.devices.values());
        devices.unshift({
            id: 'default',
            label: '–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
            kind: 'audiooutput'
        });
        return devices;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    saveSettings() {
        try {
            localStorage.setItem('audioRouter_settings', JSON.stringify(this.settings));
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    loadSettings() {
        try {
            const saved = localStorage.getItem('audioRouter_settings');
            if (saved) {
                this.settings = { ...this.settings, ...JSON.parse(saved) };
                console.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    getSettings() {
        return { ...this.settings };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ setSinkId
     */
    static isSetSinkIdSupported() {
        return 'setSinkId' in HTMLMediaElement.prototype;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AudioRouter;
} 