# Рабочий процесс разработки beLive

## Схема работы с roadmap

1. **Выбор задачи**
   - Просмотр текущих приоритетов в `roadmap.mdc`
   - Выбор задачи, учитывая зависимости и логическую последовательность
   - Изменение статуса задачи на `[~]` (в процессе)

2. **Подготовка к реализации**
   - Изучение необходимых библиотек через `libraries.mdc`
   - Подготовка контекста с использованием инструкций из `context7-integration.mdc`
   - Анализ существующего кода для оптимальной интеграции

3. **Реализация**
   - Создание прототипа решения
   - Интеграция с существующим кодом
   - Тестирование функциональности

4. **Завершение задачи**
   - Изменение статуса задачи на `[✓]` (завершено) в `roadmap.mdc`
   - Документирование внедренной функциональности
   - Определение следующего приоритета

## Обновление roadmap

При обновлении статуса задач в `roadmap.mdc`:

```markdown
### 1. Улучшение обработки текста
- [ ] Расширенный набор анимаций текста             # Не начато
- [~] Настройки шрифта "на лету"                   # В процессе
- [✓] Оптимизация авто-скролла с предзагрузкой     # Завершено
```

Важно:
1. Сохранять форматирование для удобства чтения
2. Добавлять комментарии о критических моментах реализации
3. Обновлять статус задачи сразу после завершения работы

## Принципы разработки

### 1. Модульность
- Каждая новая функция оформляется как отдельный модуль
- Используйте ES6 модули для структурирования кода
```javascript
// Пример структуры модуля
export class TextAnimator {
  constructor(options) {
    // Инициализация
  }
  
  animateText(element, type) {
    // Реализация анимации
  }
}
```

### 2. Производительность
- Тяжелые операции выносите в Web Workers
- Используйте кэширование для повторяющихся операций
- Оптимизируйте рендеринг и управление DOM

### 3. Совместимость
- Проверяйте поддержку API в различных браузерах
- Добавляйте полифиллы для несовместимых возможностей
- Тестируйте на разных устройствах и разрешениях

### 4. Пользовательский опыт
- Интерфейс должен быть отзывчивым и интуитивно понятным
- Учитывайте контекст использования (караоке, концерт, репетиция)
- Предусматривайте плавные переходы между состояниями

## Интеграция с roadmap

### Отметка прогресса разработки

Для отслеживания прогресса используйте следующий подход:

1. **При начале работы над задачей:**
```diff
- [ ] Расширенный набор анимаций текста
+ [~] Расширенный набор анимаций текста
```

2. **При завершении задачи:**
```diff
- [~] Расширенный набор анимаций текста
+ [✓] Расширенный набор анимаций текста
```

### Добавление новых задач

Если в процессе разработки появляются новые задачи:

1. Добавьте их в соответствующую секцию roadmap
2. Укажите зависимости от других задач (если есть)
3. Определите приоритет и предполагаемые инструменты

Пример:
```markdown
- [ ] Новая задача: Интеграция с внешними сервисами
  - Зависимости: Завершить задачу X
  - Инструменты: axios, OAuth библиотека
```

## Рекомендации по работе с Context7

### Подготовка контекста для задачи

Перед началом работы над задачей из roadmap:

1. Загрузите документацию выбранных библиотек
2. Изучите существующий код в проекте
3. Подготовьте примеры использования

```javascript
// Пример подготовки контекста для задачи "Расширенный набор анимаций текста"
// 1. Загрузка документации GSAP
import { gsap } from 'gsap';
import { SplitText } from 'gsap/SplitText';

// 2. Изучение существующего кода
// Анализ существующей системы отображения текста
const existingTextRendering = LyricsDisplay.prototype._renderStandardLines;

// 3. Подготовка примера использования
function animateTextExample() {
  const lyricElement = document.querySelector('.lyric-line');
  gsap.from(lyricElement, {
    opacity: 0,
    y: 20,
    duration: 0.5,
    ease: 'back'
  });
}
```

### Использование Context7 для решения проблем

При возникновении проблем в реализации:

1. Четко сформулируйте проблему
2. Предоставьте соответствующий контекст (код, окружение)
3. Используйте информацию из документации и примеры из `libraries.mdc`

## Коллаборация и версионирование

### Ведение истории изменений

Для каждого существенного изменения:

1. Добавляйте краткое описание в CHANGELOG.md
2. Обновляйте версию в соответствии с семантическим версионированием
   - MAJOR: значительные изменения API
   - MINOR: добавление функциональности с обратной совместимостью
   - PATCH: исправления ошибок с обратной совместимостью

### Документирование кода

Для всех создаваемых компонентов и функций:

```javascript
/**
 * Анимирует появление текстовой строки с выбранным эффектом
 * 
 * @param {HTMLElement} element - DOM элемент для анимации
 * @param {string} effect - Название эффекта анимации ('fade', 'slide', 'typing')
 * @param {Object} options - Дополнительные параметры анимации
 * @returns {Promise} Промис, который разрешается по завершении анимации
 * 
 * @example
 * // Анимация строки текста с эффектом печатной машинки
 * animateLyricLine(lineElement, 'typing', { speed: 50 })
 *   .then(() => console.log('Анимация завершена'));
 */
function animateLyricLine(element, effect, options = {}) {
  // Реализация
}
```

## Оценка и отчетность

### Отслеживание прогресса

1. Регулярно оценивайте общий прогресс по roadmap
2. Выявляйте узкие места и блокеры
3. Корректируйте приоритеты при необходимости

### Обзор качества кода

Периодически проводите обзор разработанного кода:

1. Производительность реализации
2. Соответствие архитектурным принципам
3. Качество пользовательского опыта
4. Удобство сопровождения и масштабирования

## Применение рабочего процесса в Cursor

В Cursor для эффективной работы используйте следующие подходы:

1. **Структурированный поиск в коде:**
   ```
   // Найти все функции, связанные с обработкой текста
   функции для анимации текста
   ```

2. **Повторное использование шаблонов:**
   ```
   // Создать новую функцию для обработки эффектов на основе существующих шаблонов
   создай функцию для эффекта размытия текста на основе шаблона в libraries.mdc
   ```

3. **Интеграция новой библиотеки:**
   ```
   // Подготовить код для интеграции библиотеки
   интегрировать wavesurfer.js для визуализации аудио согласно библиотеке в libraries.mdc
   ```

4. **Обновление статуса задачи:**
   ```
   // Обновить статус задачи в roadmap
   обнови статус задачи "Оптимизация авто-скролла с предзагрузкой" в roadmap.mdc на "завершено"
   ```

5. **Получение рекомендаций по реализации:**
   ```
   // Получить рекомендации по наилучшей реализации
   как лучше реализовать BPM-растяжение аудио с использованием SoundTouch.js
   ```

Придерживаясь этих рекомендаций, вы обеспечите систематический и эффективный процесс разработки, сохраняя при этом высокое качество кода и прозрачность прогресса. 