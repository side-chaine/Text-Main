# Библиотеки и пакеты для beLive

Список рекомендуемых библиотек и инструментов для реализации функций beLive. Каждая библиотека выбрана с учетом специфики задач проекта, производительности и современных веб-стандартов.

## Обработка аудио

### 1. Web Audio API (встроенный)
```javascript
// Пример использования
const audioContext = new AudioContext();
const analyser = audioContext.createAnalyser();
analyser.fftSize = 2048;
```
- **Применение**: Базовое управление аудио, воспроизведение, анализ
- **Приоритет**: Высокий

### 2. SoundTouch.js
```javascript
// Пример интеграции
import { SoundTouch, SimpleFilter, WebAudioBufferSource } from 'soundtouch-js';

function createTimeStretcher(buffer, tempo) {
  const soundTouch = new SoundTouch();
  soundTouch.tempo = tempo;
  
  const source = new WebAudioBufferSource(buffer);
  return new SimpleFilter(source, soundTouch);
}
```
- **Применение**: Изменение темпа без искажения высоты звука
- **Приоритет**: Высокий (для режима LoopBlock)
- **GitHub**: https://github.com/cutterbl/SoundTouchJS

### 3. WaveSurfer.js
```javascript
// Пример использования с регионами
import WaveSurfer from 'wavesurfer.js';
import RegionsPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';

const wavesurfer = WaveSurfer.create({
  container: '#waveform',
  waveColor: '#4F4A85',
  progressColor: '#383351',
  plugins: [RegionsPlugin.create()]
});

// Создание региона для цикла
const region = wavesurfer.addRegion({
  start: 1.0,
  end: 3.0,
  color: 'rgba(255, 0, 0, 0.2)'
});
```
- **Применение**: Визуализация аудиоволны, создание LoopBlock
- **Приоритет**: Высокий
- **GitHub**: https://github.com/katspaugh/wavesurfer.js

## Обработка текста и анимации

### 1. GSAP (GreenSock Animation Platform)
```javascript
// Пример анимации текста
import { gsap } from 'gsap';
import { SplitText } from 'gsap/SplitText';

gsap.registerPlugin(SplitText);

const text = document.querySelector('.lyric-line');
const split = new SplitText(text, {type: 'chars, words'});

gsap.from(split.chars, {
  opacity: 0,
  y: 20,
  stagger: 0.05,
  duration: 0.5,
  ease: 'back'
});
```
- **Применение**: Продвинутые анимации текста
- **Приоритет**: Высокий
- **Сайт**: https://greensock.com/gsap/

### 2. Anime.js
```javascript
// Пример эффекта подсветки текста
import anime from 'animejs/lib/anime.es.js';

function highlightText(element) {
  anime({
    targets: element,
    color: ['#FFF', '#FFCC00', '#FFF'],
    scale: [1, 1.1, 1],
    duration: 1000,
    easing: 'easeInOutQuad'
  });
}
```
- **Применение**: Легковесные анимации текста
- **Приоритет**: Средний (альтернатива GSAP)
- **GitHub**: https://github.com/juliangarnier/anime/

### 3. Intersection Observer API (встроенный)
```javascript
// Пример авто-скролла с предзагрузкой
const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      // Предзагружаем следующий блок текста
      preloadNextBlock();
    }
  });
}, {
  threshold: 0.5
});

document.querySelectorAll('.lyric-block').forEach(block => {
  observer.observe(block);
});
```
- **Применение**: Оптимизация авто-скролла текста
- **Приоритет**: Высокий

## Обработка видео и маски

### 1. TensorFlow.js + Face-api.js
```javascript
// Пример распознавания лица
import * as tf from '@tensorflow/tfjs';
import * as faceapi from 'face-api.js';

async function detectFace(video) {
  await faceapi.nets.tinyFaceDetector.loadFromUri('/models');
  await faceapi.nets.faceLandmark68Net.loadFromUri('/models');
  
  const detection = await faceapi.detectSingleFace(video, 
    new faceapi.TinyFaceDetectorOptions())
    .withFaceLandmarks();
    
  return detection;
}
```
- **Применение**: Распознавание лиц для масок
- **Приоритет**: Средний
- **GitHub**: https://github.com/justadudewhohacks/face-api.js

### 2. Canvas API + WebGL (встроенные)
```javascript
// Пример фильтра для видео
function applyFilter(videoElement, canvasElement) {
  const ctx = canvasElement.getContext('2d');
  
  function process() {
    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    
    // Применяем эффект (например, черно-белый)
    for (let i = 0; i < imageData.data.length; i += 4) {
      const avg = (imageData.data[i] + imageData.data[i+1] + imageData.data[i+2]) / 3;
      imageData.data[i] = avg; // R
      imageData.data[i+1] = avg; // G
      imageData.data[i+2] = avg; // B
    }
    
    ctx.putImageData(imageData, 0, 0);
    requestAnimationFrame(process);
  }
  
  process();
}
```
- **Применение**: Базовые видеоэффекты
- **Приоритет**: Высокий

### 3. Three.js
```javascript
// Пример 3D-маски
import * as THREE from 'three';

function create3DMask(container, facePoints) {
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ alpha: true });
  
  container.appendChild(renderer.domElement);
  
  // Создание 3D-маски на основе точек лица
  const geometry = new THREE.BufferGeometry();
  geometry.setAttribute('position', new THREE.Float32BufferAttribute(facePoints, 3));
  
  const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });
  const mask = new THREE.Mesh(geometry, material);
  
  scene.add(mask);
  
  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  
  animate();
}
```
- **Применение**: 3D-эффекты и продвинутые маски
- **Приоритет**: Низкий (для будущего развития)
- **GitHub**: https://github.com/mrdoob/three.js/

## Хранение данных и оптимизация

### 1. Dexie.js (IndexedDB wrapper)
```javascript
// Пример хранения кэшированных текстов
import Dexie from 'dexie';

const db = new Dexie('beLiveDB');
db.version(1).stores({
  texts: '&id, title, artist, content, timestamp',
  tracks: '&id, title, artist, audioUrl, markers'
});

// Сохранение разобранного текста
async function cacheProcessedText(id, title, artist, content) {
  await db.texts.put({
    id, 
    title,
    artist,
    content,
    timestamp: Date.now()
  });
}

// Получение кэшированного текста
async function getProcessedText(id) {
  return db.texts.get(id);
}
```
- **Применение**: Кэширование текстов и настроек
- **Приоритет**: Высокий
- **GitHub**: https://github.com/dexie/Dexie.js

### 2. Web Workers API (встроенный)
```javascript
// Пример для обработки RTF
// main.js
function parseRtfInWorker(rtfContent) {
  return new Promise((resolve, reject) => {
    const worker = new Worker('js/rtf-worker.js');
    worker.onmessage = (e) => resolve(e.data);
    worker.onerror = reject;
    worker.postMessage({ text: rtfContent });
  });
}

// rtf-worker.js
self.onmessage = function(e) {
  const rtfContent = e.data.text;
  const processedText = processRtfText(rtfContent);
  self.postMessage(processedText);
};
```
- **Применение**: Фоновая обработка данных
- **Приоритет**: Высокий

### 3. OffscreenCanvas API
```javascript
// Пример для визуализации аудиоволны
async function createOffscreenWaveform(container) {
  const canvas = document.createElement('canvas');
  container.appendChild(canvas);
  
  const offscreen = canvas.transferControlToOffscreen();
  const worker = new Worker('js/waveform-worker.js');
  
  worker.postMessage({ canvas: offscreen }, [offscreen]);
  
  return {
    updateWaveform: (audioData) => {
      worker.postMessage({ audioData });
    }
  };
}
```
- **Применение**: Оптимизация рендеринга
- **Приоритет**: Средний

## Управление и UI

### 1. hotkeys-js
```javascript
// Пример горячих клавиш
import hotkeys from 'hotkeys-js';

// Управление без отвлечения от текста
hotkeys('space', (event) => {
  event.preventDefault();
  togglePlayPause();
});

hotkeys('left,right', (event, handler) => {
  event.preventDefault();
  if (handler.key === 'left') {
    skipBackward(5); // 5 секунд назад
  } else {
    skipForward(5); // 5 секунд вперед
  }
});
```
- **Применение**: Горячие клавиши для управления
- **Приоритет**: Высокий
- **GitHub**: https://github.com/jaywcjlove/hotkeys

### 2. noUiSlider
```javascript
// Пример создания слайдера для LoopBlock
import noUiSlider from 'nouislider';
import 'nouislider/dist/nouislider.css';

const slider = document.getElementById('loop-slider');

noUiSlider.create(slider, {
  start: [0, 30], // Начальный и конечный моменты в секундах
  connect: true,
  range: {
    'min': 0,
    'max': trackDuration
  }
});

slider.noUiSlider.on('update', (values) => {
  const [start, end] = values.map(Number);
  updateLoopRegion(start, end);
});
```
- **Применение**: Интерактивное выделение LoopBlock
- **Приоритет**: Высокий
- **GitHub**: https://github.com/leongersen/noUiSlider

### 3. dat.gui
```javascript
// Пример настройки эффектов
import * as dat from 'dat.gui';

function setupEffectsPanel() {
  const gui = new dat.GUI();
  const effectParams = {
    blur: 0,
    brightness: 100,
    contrast: 100,
    grayscale: false,
    applyMask: false
  };
  
  gui.add(effectParams, 'blur', 0, 20).onChange(updateVideoEffect);
  gui.add(effectParams, 'brightness', 50, 150).onChange(updateVideoEffect);
  gui.add(effectParams, 'contrast', 50, 150).onChange(updateVideoEffect);
  gui.add(effectParams, 'grayscale').onChange(updateVideoEffect);
  gui.add(effectParams, 'applyMask').onChange(toggleMask);
  
  return effectParams;
}
```
- **Применение**: Интерфейс настройки эффектов
- **Приоритет**: Средний
- **GitHub**: https://github.com/dataarts/dat.gui

## Интеграции и социальные функции

### 1. MediaRecorder API (встроенный)
```javascript
// Пример записи выступления
function recordPerformance(stream) {
  const chunks = [];
  const mediaRecorder = new MediaRecorder(stream);
  
  mediaRecorder.ondataavailable = (e) => {
    if (e.data.size > 0) {
      chunks.push(e.data);
    }
  };
  
  mediaRecorder.onstop = () => {
    const blob = new Blob(chunks, { type: 'video/webm' });
    const url = URL.createObjectURL(blob);
    
    // Предлагаем скачать или поделиться
    const downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = `belive-performance-${Date.now()}.webm`;
    downloadLink.click();
  };
  
  mediaRecorder.start();
  
  return {
    stop: () => mediaRecorder.stop()
  };
}
```
- **Применение**: Запись выступлений
- **Приоритет**: Средний

### 2. Web Share API (встроенный)
```javascript
// Пример шеринга записи
async function shareRecording(fileUrl, title) {
  try {
    const response = await fetch(fileUrl);
    const blob = await response.blob();
    const file = new File([blob], 'performance.webm', { type: 'video/webm' });
    
    if (navigator.canShare && navigator.canShare({ files: [file] })) {
      await navigator.share({
        title: title,
        files: [file]
      });
    } else {
      // Запасной вариант, если API не поддерживается
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'performance.webm';
      a.click();
    }
  } catch (error) {
    console.error('Sharing failed', error);
  }
}
```
- **Применение**: Шеринг записей
- **Приоритет**: Низкий

### 3. Socket.IO
```javascript
// Пример чата во время LIVE
import io from 'socket.io-client';

function setupLiveChat(roomId, username) {
  const socket = io('/live-sessions');
  
  socket.emit('join', { room: roomId, username });
  
  socket.on('message', (data) => {
    addMessageToChat(data.username, data.text);
  });
  
  function sendMessage(text) {
    socket.emit('message', { room: roomId, text });
  }
  
  return { sendMessage };
}
```
- **Применение**: LIVE-чат, интерактивные сессии
- **Приоритет**: Низкий (для долгосрочного развития)
- **GitHub**: https://github.com/socketio/socket.io

## Инструкция по интеграции библиотек

1. **Выбор библиотеки для задачи**:
   - Сверьтесь с рекомендациями в roadmap.mdc
   - Учитывайте приоритет и сложность внедрения
   - Проверьте совместимость с существующим кодом

2. **Установка и инициализация**:
   ```bash
   npm install <библиотека>
   ```
   
   ```javascript
   // Минимальная инициализация с необходимыми опциями
   import Library from 'library';
   const instance = new Library({
     // Только необходимый минимум настроек
   });
   ```

3. **Модульное подключение**:
   ```javascript
   // Только нужные модули из больших библиотек
   import { SplitText } from 'gsap/SplitText';
   import { RegionsPlugin } from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';
   ```

4. **Оптимизация загрузки**:
   - Для больших библиотек использовать динамический импорт
   ```javascript
   async function loadVideoEffects() {
     if (needVideoEffects) {
       const TensorFlow = await import('@tensorflow/tfjs');
       const FaceAPI = await import('face-api.js');
       // Инициализация после загрузки
     }
   }
   ```

5. **Тестирование производительности**:
   - После внедрения библиотеки обязательно проверить влияние на:
     - Время загрузки страницы
     - Отзывчивость интерфейса
     - Потребление памяти
     - Работу на мобильных устройствах

Для каждой задачи из roadmap.mdc используйте соответствующую библиотеку или комбинацию библиотек, уделяя особое внимание производительности и опыту пользователя. 